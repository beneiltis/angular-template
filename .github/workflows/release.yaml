name: Build, Package, Release
on:
    release:
      types: [created]
    push:
        branches:
          - main
env:
  IMAGE_NAME: ghcr.io/beneiltis/angular-template
  DOCKERFILE: Dockerfile
  DOCKERCONTEXT: .
  KIND: Deployment                           # Valid types are [Deployment | Daemonset | Statefulset | Replicaset]
  NAMESPACE_NAME: default                    # The namespace of your resource
  RESOURCE_NAME: web-app                     # The name of your resource
  CONTAINER_NAME: nginx                      # The container name of your resource
  VERSION: 0.0.0                             # will be overwritten during run

jobs:
  build-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure at least one tag exists
        run: |
          if [ -z "$(git tag)" ]; then
            echo "No tags found. You must create at least one tag to use this workflow."
            exit 1
          fi
          
      - name: Ensure the latest tag is a semantic version
        id: determine_version
        run: |
          VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))
          if [[ ! "$VERSION" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "The latest tag $VERSION is not a semantic version. Ensure the tag follows semantic versioning (e.g., 1.0.0 or v1.0.0)."
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Determined version: $VERSION"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image
        run: |
          docker build -f ${{ env.DOCKERFILE }}  -t ${{ env.IMAGE_NAME }}:${{ env.VERSION }} -t ${{ env.IMAGE_NAME }}:latest .

      - name: Push image
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          docker push ${{ env.IMAGE_NAME }}:latest

      - name: Release with mogenius
        uses: mogenius/mogenius-release-action@v1
        with:
          image: "${{ env.IMAGE_NAME }}:${{ env.VERSION }}"
          kind: ${{ env.KIND }}
          namespace: ${{ env.NAMESPACE_NAME }}
          resourceName: ${{ env.RESOURCE_NAME }}
          containerName: ${{ env.CONTAINER_NAME }}
          token: ${{ secrets.MOGENIUS_TOKEN }}
